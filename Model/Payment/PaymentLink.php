<?php

namespace WolfSellers\PaymentLink\Model\Payment;

use Magento\Directory\Helper\Data as DirectoryHelper;
use Magento\Payment\Model\Method\AbstractMethod;
use Magento\Framework\Model\Context;
use Magento\Framework\Registry;
use Magento\Framework\Api\ExtensionAttributesFactory;
use Magento\Framework\Api\AttributeValueFactory;
use Magento\Payment\Helper\Data;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Payment\Model\Method\Logger;
use Magento\Sales\Model\Order;

class PaymentLink extends AbstractMethod
{

    const PAYMENT_METHOD_CODE = 'paymentlink';
    /**
     * @var string
     */
    protected $_code = self::PAYMENT_METHOD_CODE;

    /**
     * @var bool
     */
    protected $_isOffline = true;

    /**
     * @var bool
     */
    protected $_canOrder = true;

    /**
     * @var bool
     */
    protected $_isInitializeNeeded = true;

    public function __construct(
        Context $context,
        Registry $registry,
        ExtensionAttributesFactory $extensionFactory,
        AttributeValueFactory $customAttributeFactory,
        Data $paymentData,
        ScopeConfigInterface $scopeConfig,
        Logger $logger,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = [],
        DirectoryHelper $directory = null
    ) {
        parent::__construct(
            $context, $registry, $extensionFactory, $customAttributeFactory, $paymentData,
            $scopeConfig, $logger, $resource, $resourceCollection, $data, $directory
        );
    }

    /**
     * @param \Magento\Quote\Api\Data\CartInterface|null $quote
     * @return bool
     */
    public function isAvailable(\Magento\Quote\Api\Data\CartInterface $quote = null)
    {
        return parent::isAvailable($quote); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getConfigPaymentAction()
    {
        return self::ACTION_ORDER;
    }

    /**
     * @param string $paymentAction
     * @param object $stateObject
     * @return PaymentLink
     */
    public function initialize($paymentAction, $stateObject)
    {
        $payment = $this->getInfoInstance();

        /** @var Order $order */
        $order = $payment->getOrder();

        $order->setState(Order::STATE_NEW);
        $order->setStatus(Order::STATE_PENDING_PAYMENT);
        $order->setCanSendNewEmailFlag(false);
        $order->save();

        $stateObject->setState(Order::STATE_PENDING_PAYMENT);
        $stateObject->setStatus(Order::STATE_PENDING_PAYMENT);
        $stateObject->setIsNotified(false);

        return parent::initialize($paymentAction, $stateObject); // TODO: Change the autogenerated stub
    }
}


